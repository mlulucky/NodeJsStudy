html(lang="en")
    head
        title SCOTT.emp CRUD
        meta(charset="UTF-8")
        //link(rel="stylesheet" href="/public/css/empDetail.css")
    body
        h1 사원 수정 폼 (Read)
        h2 http 통신에서 요청의 2가지 방식(method) GET 과 POST (👀암기!!! : 면접에도 종종 등장! 차이점!) // 필요한거 요청 - 서버응답 끝
        h3 GET : 파라미터를 url 의 쿼리스트링에 포함해서 보내는 방식 (🍒공유하는 url)
            ul
                li 보통 GET 방식은 동적리소스의 정보를 추출(SELECT)하는 데 사용되는 파라미터를 보낼 때 사용한다.
                li 때문에 보통 파라미터의 값은 바뀌지 않고 파라미터가 없다면 동적리소스는 동작하지 않는다.(400 에러)
                li 저장하거나 공유하는 url 의 파라미터는 GET 방식으로 보낸다.
                li 장점) 통신속도가 POST 보다 빠르다, url 공유할 수 있다.
                li 단점) url 길이가 제한적이라서 값이 긴 파라미터를 전달할 수 없다. (브라우저마다 url 길이가 다르다)
        h3 POST : 양식을 제출하면 파라미터를 요청 Header 에 포함해서 보내는 방식 (🍒공유되지 않는 url)
            ul
                li 보통 POST 방식은 데이터를 수정 등록 하는 양식에서 파라미터를 보낼 때 사용한다.
                li 이때 사용된 동적 리소스는 파라미터의 값에 의해서 데이터가 변경될 수 있기 때문에 공유하는 url 로 사용될 수 없다.
                li 요청 Header : 요청하는 리소스(url), 브라우저, 컴퓨터, 통신... 상세(메타) 정보가 포함됨 // 요청Header(네트워크) 에 쿼리스트링(파라미터)가 포함된다
                li 장점) 보안이 강화된다 (파라미터의 값이 숨겨져서 넘어가기 때문 - ex)패스워드가 보이지 않는다), 파라미터 길이 제한이 없다.
                li 단점) GET 보다 느리다. url 을 공유할 수 없다.

        form(name="empUpdateForm",action="/empUpdate.do",method="POST")
            // action : 폼에있는 내역을 어디로 전달할거냐, 액션 페이지
            // method 안적으면 기본값 "GET"
            // 폼이 버튼을 포함하고 있어야 한다.
            div
                p
                    span 사번 :
                    strong=emp.EMPNO
                    input(value=emp.EMPNO,name="empno",type="hidden")
                    // type="hidden" 보이지 않지만 넘어가는 파라미터
                    // name : 파라미터 이름. 파라미터 키값

                p
                    span 이름 :
                    input(value=emp.ENAME,name="ename")
                p
                    span 직책 :
                    input(value=emp.JOB,name="job")
                p
                    span 급여 :
                    input(value=emp.SAL,name="sal")
                p
                    span 상여금 :
                    input(value=emp.COMM,name="comm")
                p
                    span 입사일 :
                    -let y=emp.HIREDATE.getUTCFullYear();
                    -let m=emp.HIREDATE.getUTCMonth()+1;
                    -m=(m<10)?`0${m}`:m;
                    -let d=emp.HIREDATE.getUTCDate();
                    -d=(d<10)?`0${d}`:d;
                    input(value=`${y}-${m}-${d}`,name="hiredate",type="date")
                    // input(value=emp.HIREDATE,name="hiredate",type="date")
                    // emp.HIREDATE 는 type=date : mysql 은 HIREDATE(년월일) 의 값을 JS의 DATE(년월일시분초밀리세컨초)로 파싱
                    // => emp.HIREDATE 를 원하는 양식으로 만들기!
                    // type=date value : yyy-MM-dd
                    // type=datetime value : yyyy-mm-dd'T'HH:mm // 'T'는 문자열 구분자 // 데이트의 로컬타입 값을 수정
                p
                    span 상사 :
                    input(value=emp.MGR,name="mgr")
                p
                    span 부서 :
                    input(value=emp.DEPTNO,name="deptno")
                p
                    a(href=`/empDelete.do?empno=${emp.EMPNO}`) 삭제&nbsp;
                    button(type="submit") 수정제출

            // 수정폼은 디테일과 똑같은데 수정폼으로 있는 것
            // mysql 에서 HIREDATE 시간이 없다. 기본 : date 의 toString
            // == 은 변수를 출력한다.
            // do 는 동적페이지 확장자명
            // POST 방식 쿼리스트링이 네트워크 요청헤더로 넘어간다. 요청에 대한 메타정보(상세정보) 가 추가
            // action을 하는 페이지를 액션페이지라고 한다 - 나중에 do라고 바뀐다// action : form 에 있는 내역을 어디로 전달한거냐
            // 📍form 태그안에 자식요소로 탭 들여쓰기 되어져 있어야 한다.
            // http 통신 : 브라우저 요청 -> 서버 응답 끝 (연결이 없다)
            // 소켓 통신  : 인풋스트립 아웃풋스트림 연결 - 계속 데이터를 주고받을 수 있다. ex) 채팅(서로봤다는걸 이벤트로 확인하는 - 1사라지는), 게임
            // <form action do> ->  GET 방식 : 폼 // POST 방식 수정하는 액션
            // input 의 name 은 파라미터의 key 값
            // 사원번호는 primary key 라서 수정안된다
            // 사원번호 수정안되게 하기 -> <input readonly=true> 추가하기 또는 // type=hidden (input 안보임)으로 하기
            // &nbsp; 공백

